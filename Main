import tkinter as tk
from tkinter import messagebox
from bip32utils import BIP32Key
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from binascii import hexlify, unhexlify

class WalletGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Gerador de Endereços de Carteira HD")

        self.label_mnemonic = tk.Label(root, text="Frase Mnemônica:")
        self.entry_mnemonic = tk.Entry(root, width=40)
        self.button_generate = tk.Button(root, text="Gerar Endereço", command=self.generate_and_display)

        # Configuração da interface gráfica
        self.label_mnemonic.grid(row=0, column=0, padx=10, pady=10, sticky=tk.W)
        self.entry_mnemonic.grid(row=0, column=1, padx=10, pady=10)
        self.button_generate.grid(row=1, column=0, columnspan=2, pady=10)

    def generate_seed(self, mnemonic):
        try:
            key = AES.new(mnemonic.encode('utf-8'), AES.MODE_ECB)
            seed = hexlify(key.encrypt(get_random_bytes(16))).decode('utf-8')
            return seed
        except Exception as e:
            messagebox.showerror("Erro", f"Erro na geração da semente: {str(e)}")
            return None

    def derive_hd_key(self, seed, path='m/0/0'):
        try:
            root_key = BIP32Key.fromEntropy(unhexlify(seed))
            derived_key = root_key.ChildKey(path)
            return derived_key
        except Exception as e:
            messagebox.showerror("Erro", f"Erro na derivação da chave HD: {str(e)}")
            return None

    def generate_wallet_address(self, private_key):
        return private_key.Address()

    def generate_and_display(self):
        mnemonic_phrase = self.entry_mnemonic.get()

        # Verifica se a frase mnemônica foi inserida
        if not mnemonic_phrase:
            messagebox.showwarning("Aviso", "Insira uma frase mnemônica.")
            return

        seed = self.generate_seed(mnemonic_phrase)

        if seed:
            hd_key = self.derive_hd_key(seed)
            wallet_address = self.generate_wallet_address(hd_key)

            # Exibe os resultados em uma janela pop-up
            result_text = f"Semente (Seed): {seed}\nChave Privada HD: {hd_key.WalletImportFormat().decode('utf-8')}\nEndereço de Carteira: {wallet_address}"
            messagebox.showinfo("Resultados", result_text)

if __name__ == "__main__":
    root = tk.Tk()
    app = WalletGeneratorApp(root)
    root.mainloop()
